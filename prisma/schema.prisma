// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  bio           String?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  Post          Post[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model VerificationToken {
  id        String @id @default(cuid())
  email     String
  token     String @unique
  expires   DateTime

  @@unique([email,token])
}

model Tag {
  id   String @id @default(cuid())
  name String @db.VarChar(100)
  Post Post[]
}

model Post {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(225)
  content   String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id])
  userId    String
  author    User     @relation(fields: [userId], references: [id])
}